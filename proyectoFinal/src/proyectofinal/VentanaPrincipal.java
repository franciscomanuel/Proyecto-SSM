/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectofinal;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * Clase que representa la ventana principal.
 * Hereda de la clase javax.swing.JFrame.
 * @author Francisco Manuel SÃ¡nchez Ramos.
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */

    BufferedImage imgSource;
    static int valor_figura;
    static Color valor_color1=Color.BLACK;
    static Color valor_color2=Color.WHITE;
    static boolean valor_relleno=false;
    static boolean editar;
    static int gro;
    static boolean activar=true;
    static boolean degradadoVertical=false;
    static boolean degradadoHorizontal=false;
    static boolean liso=false;
    static boolean continua=false;
    static boolean punteada=false;
    static boolean modificar=false;
    static boolean aplicarBrilloImagen;
    
    /**
     * Crea un objeto VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        
        valor_figura=1;
        botonColor1.setBackground(valor_color1);
        botonColor2.setBackground(valor_color2);
        continua=true;
        valor_relleno=false;
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        BarraEstado = new javax.swing.JLabel();
        panelBarra1 = new javax.swing.JPanel();
        barraHerramientas1 = new javax.swing.JToolBar();
        botonNuevo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        botonWebcam = new javax.swing.JButton();
        botonCapturar = new javax.swing.JButton();
        botonGrabar = new javax.swing.JButton();
        panelBarra2 = new javax.swing.JPanel();
        barraHerramientas2 = new javax.swing.JToolBar();
        panelTabulado = new javax.swing.JTabbedPane();
        panelAtributos = new javax.swing.JPanel();
        colorNegro = new javax.swing.JButton();
        colorRojo = new javax.swing.JButton();
        colorAzul = new javax.swing.JButton();
        colorBlanco = new javax.swing.JButton();
        colorAmarillo = new javax.swing.JButton();
        colorVerde = new javax.swing.JButton();
        etiquetaColores = new javax.swing.JLabel();
        etiquetaGrosor = new javax.swing.JLabel();
        opcionGrosor = new javax.swing.JSpinner();
        etiquetaRelleno = new javax.swing.JLabel();
        botonMasColores = new javax.swing.JButton();
        etiquetaDiscontinuidad = new javax.swing.JLabel();
        opcionEditar = new javax.swing.JCheckBox();
        opcionSinRelleno = new javax.swing.JRadioButton();
        opcionRellenoLiso = new javax.swing.JRadioButton();
        opcionDegradadoVertical = new javax.swing.JRadioButton();
        opcionContinua = new javax.swing.JRadioButton();
        opcionPunteada = new javax.swing.JRadioButton();
        etiquetaColorTrazo = new javax.swing.JLabel();
        etiquetaColorRelleno = new javax.swing.JLabel();
        botonColor1 = new javax.swing.JToggleButton();
        botonColor2 = new javax.swing.JToggleButton();
        opcionDegradadoHorizontal = new javax.swing.JRadioButton();
        panelFormas = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        figuraPunto = new javax.swing.JButton();
        figuraCirculo = new javax.swing.JButton();
        figuraLinea = new javax.swing.JButton();
        figuraCuadrado = new javax.swing.JButton();
        figuraTrazoLibre = new javax.swing.JButton();
        panelBarraHerramientas3 = new javax.swing.JPanel();
        barraHerramientas3 = new javax.swing.JToolBar();
        panel1 = new javax.swing.JPanel();
        panel1_1 = new javax.swing.JPanel();
        etiquetaBrillo = new javax.swing.JLabel();
        opcionBrillo = new javax.swing.JSlider();
        panel2 = new javax.swing.JPanel();
        panel2_1 = new javax.swing.JPanel();
        etiquetaFiltro = new javax.swing.JLabel();
        opcionFiltro = new javax.swing.JComboBox();
        panel3 = new javax.swing.JPanel();
        panel3_1 = new javax.swing.JPanel();
        etiquetaContaste = new javax.swing.JLabel();
        botonContraste = new javax.swing.JButton();
        botonOscurecer = new javax.swing.JButton();
        botonIluminar = new javax.swing.JButton();
        panel4 = new javax.swing.JPanel();
        panel4_1 = new javax.swing.JPanel();
        etiquetaRotacion = new javax.swing.JLabel();
        opcionRotacion = new javax.swing.JSlider();
        panel5 = new javax.swing.JPanel();
        panel5_1 = new javax.swing.JPanel();
        rotacion90 = new javax.swing.JButton();
        rotacion270 = new javax.swing.JButton();
        rotacion180 = new javax.swing.JButton();
        panel6 = new javax.swing.JPanel();
        panel6_1 = new javax.swing.JPanel();
        etiquetaEscalado = new javax.swing.JLabel();
        botonAumentar = new javax.swing.JButton();
        botonDisminuir = new javax.swing.JButton();
        panel7 = new javax.swing.JPanel();
        panel7_1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        botonNegativo = new javax.swing.JButton();
        panel8 = new javax.swing.JPanel();
        etiquetaEscalaGrises = new javax.swing.JLabel();
        botonEscalaGrises = new javax.swing.JButton();
        panelEscritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        opcioArchivo = new javax.swing.JMenu();
        opcionNuevo = new javax.swing.JMenuItem();
        opcionAbrir = new javax.swing.JMenuItem();
        opcionGuardar = new javax.swing.JMenuItem();
        opcionSalir = new javax.swing.JMenuItem();
        opcionVer = new javax.swing.JMenu();
        ocultarBarraGeneral = new javax.swing.JCheckBoxMenuItem();
        ocultarBarraDibujo = new javax.swing.JCheckBoxMenuItem();
        OcultarBarraOperaciones = new javax.swing.JCheckBoxMenuItem();
        opcionAyuda = new javax.swing.JMenu();
        opcionAcercaDe = new javax.swing.JMenuItem();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BarraEstado.setText("Estado");
        getContentPane().add(BarraEstado, java.awt.BorderLayout.PAGE_END);

        panelBarra1.setLayout(new java.awt.BorderLayout());

        barraHerramientas1.setRollover(true);

        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        botonNuevo.setFocusable(false);
        botonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                botonNuevoMouseMoved(evt);
            }
        });
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });
        barraHerramientas1.add(botonNuevo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                botonAbrirMouseMoved(evt);
            }
        });
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        barraHerramientas1.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                botonGuardarMouseMoved(evt);
            }
        });
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        barraHerramientas1.add(botonGuardar);

        botonWebcam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        botonWebcam.setFocusable(false);
        botonWebcam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonWebcam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonWebcam.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                botonWebcamMouseMoved(evt);
            }
        });
        botonWebcam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonWebcamActionPerformed(evt);
            }
        });
        barraHerramientas1.add(botonWebcam);

        botonCapturar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Capturar.png"))); // NOI18N
        botonCapturar.setFocusable(false);
        botonCapturar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCapturar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCapturar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                botonCapturarMouseMoved(evt);
            }
        });
        botonCapturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapturarActionPerformed(evt);
            }
        });
        barraHerramientas1.add(botonCapturar);

        botonGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/grabar.png"))); // NOI18N
        botonGrabar.setFocusable(false);
        botonGrabar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGrabar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGrabar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                botonGrabarMouseMoved(evt);
            }
        });
        botonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrabarActionPerformed(evt);
            }
        });
        barraHerramientas1.add(botonGrabar);

        panelBarra1.add(barraHerramientas1, java.awt.BorderLayout.PAGE_START);

        panelBarra2.setLayout(new java.awt.BorderLayout());

        barraHerramientas2.setRollover(true);

        colorNegro.setBackground(new java.awt.Color(0, 0, 0));
        colorNegro.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                colorNegroMouseMoved(evt);
            }
        });
        colorNegro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorNegroActionPerformed(evt);
            }
        });

        colorRojo.setBackground(new java.awt.Color(255, 0, 0));
        colorRojo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                colorRojoMouseMoved(evt);
            }
        });
        colorRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorRojoActionPerformed(evt);
            }
        });

        colorAzul.setBackground(new java.awt.Color(0, 51, 255));
        colorAzul.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                colorAzulMouseMoved(evt);
            }
        });
        colorAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorAzulActionPerformed(evt);
            }
        });

        colorBlanco.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                colorBlancoMouseMoved(evt);
            }
        });
        colorBlanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorBlancoActionPerformed(evt);
            }
        });

        colorAmarillo.setBackground(new java.awt.Color(255, 255, 51));
        colorAmarillo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                colorAmarilloMouseMoved(evt);
            }
        });
        colorAmarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorAmarilloActionPerformed(evt);
            }
        });

        colorVerde.setBackground(new java.awt.Color(0, 255, 0));
        colorVerde.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                colorVerdeMouseMoved(evt);
            }
        });
        colorVerde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorVerdeActionPerformed(evt);
            }
        });

        etiquetaColores.setText("Colores");

        etiquetaGrosor.setText("Grosor");

        opcionGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opcionGrosorStateChanged(evt);
            }
        });
        opcionGrosor.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                opcionGrosorMouseMoved(evt);
            }
        });

        etiquetaRelleno.setText("Relleno");

        botonMasColores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/mas colores.png"))); // NOI18N
        botonMasColores.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                botonMasColoresMouseMoved(evt);
            }
        });
        botonMasColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMasColoresActionPerformed(evt);
            }
        });

        etiquetaDiscontinuidad.setText("Discontinuidad");

        opcionEditar.setText("Editar");
        opcionEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionEditarActionPerformed(evt);
            }
        });

        buttonGroup2.add(opcionSinRelleno);
        opcionSinRelleno.setSelected(true);
        opcionSinRelleno.setText("No rellenar");
        opcionSinRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSinRellenoActionPerformed(evt);
            }
        });

        buttonGroup2.add(opcionRellenoLiso);
        opcionRellenoLiso.setText("Relleno Liso");
        opcionRellenoLiso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionRellenoLisoActionPerformed(evt);
            }
        });

        buttonGroup2.add(opcionDegradadoVertical);
        opcionDegradadoVertical.setText("Degradado Vertical");
        opcionDegradadoVertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionDegradadoVerticalActionPerformed(evt);
            }
        });

        buttonGroup1.add(opcionContinua);
        opcionContinua.setSelected(true);
        opcionContinua.setText("Continua");
        opcionContinua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionContinuaActionPerformed(evt);
            }
        });

        buttonGroup1.add(opcionPunteada);
        opcionPunteada.setText("Punteada");
        opcionPunteada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionPunteadaActionPerformed(evt);
            }
        });

        etiquetaColorTrazo.setText("Color trazo");

        etiquetaColorRelleno.setText("Color relleno");

        buttonGroup3.add(botonColor1);
        botonColor1.setSelected(true);
        botonColor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonColor1ActionPerformed(evt);
            }
        });

        buttonGroup3.add(botonColor2);
        botonColor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonColor2ActionPerformed(evt);
            }
        });

        buttonGroup2.add(opcionDegradadoHorizontal);
        opcionDegradadoHorizontal.setText("Degradado Horizontal");
        opcionDegradadoHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionDegradadoHorizontalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAtributosLayout = new javax.swing.GroupLayout(panelAtributos);
        panelAtributos.setLayout(panelAtributosLayout);
        panelAtributosLayout.setHorizontalGroup(
            panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAtributosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiquetaColores)
                    .addGroup(panelAtributosLayout.createSequentialGroup()
                        .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colorBlanco, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(colorNegro, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colorAmarillo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(colorRojo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colorAzul, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(colorVerde, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAtributosLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(etiquetaGrosor))
                    .addGroup(panelAtributosLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(opcionGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAtributosLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(etiquetaRelleno))
                    .addGroup(panelAtributosLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(opcionSinRelleno)
                            .addComponent(opcionRellenoLiso)
                            .addComponent(opcionDegradadoVertical)
                            .addComponent(opcionDegradadoHorizontal))))
                .addGap(25, 25, 25)
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opcionPunteada)
                    .addGroup(panelAtributosLayout.createSequentialGroup()
                        .addComponent(opcionContinua)
                        .addGap(35, 35, 35)
                        .addComponent(opcionEditar))
                    .addComponent(etiquetaDiscontinuidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiquetaColorTrazo)
                    .addComponent(botonColor1))
                .addGap(34, 34, 34)
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiquetaColorRelleno)
                    .addComponent(botonColor2))
                .addGap(50, 50, 50)
                .addComponent(botonMasColores)
                .addGap(53, 53, 53))
        );
        panelAtributosLayout.setVerticalGroup(
            panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAtributosLayout.createSequentialGroup()
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaColores)
                    .addComponent(etiquetaGrosor)
                    .addComponent(etiquetaRelleno)
                    .addComponent(etiquetaDiscontinuidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAtributosLayout.createSequentialGroup()
                        .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAtributosLayout.createSequentialGroup()
                                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(colorRojo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                                    .addComponent(colorAzul, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(colorNegro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(colorAmarillo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(panelAtributosLayout.createSequentialGroup()
                                        .addComponent(colorBlanco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(1, 1, 1))
                                    .addComponent(colorVerde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(opcionGrosor))
                        .addGap(16, 16, 16))
                    .addGroup(panelAtributosLayout.createSequentialGroup()
                        .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(opcionEditar)
                            .addComponent(opcionContinua))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(opcionPunteada)
                        .addContainerGap())
                    .addGroup(panelAtributosLayout.createSequentialGroup()
                        .addComponent(opcionSinRelleno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(opcionRellenoLiso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(opcionDegradadoVertical)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(opcionDegradadoHorizontal))))
            .addGroup(panelAtributosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botonMasColores)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panelAtributosLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaColorTrazo)
                    .addComponent(etiquetaColorRelleno))
                .addGap(18, 18, 18)
                .addGroup(panelAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonColor1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonColor2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelTabulado.addTab("Atributos", panelAtributos);

        jLabel2.setText("Formas");

        figuraPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        figuraPunto.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                figuraPuntoMouseMoved(evt);
            }
        });
        figuraPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                figuraPuntoActionPerformed(evt);
            }
        });

        figuraCirculo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Ovalo.gif"))); // NOI18N
        figuraCirculo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                figuraCirculoMouseMoved(evt);
            }
        });
        figuraCirculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                figuraCirculoActionPerformed(evt);
            }
        });

        figuraLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Linea.gif"))); // NOI18N
        figuraLinea.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                figuraLineaMouseMoved(evt);
            }
        });
        figuraLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                figuraLineaActionPerformed(evt);
            }
        });

        figuraCuadrado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Rectangulo.gif"))); // NOI18N
        figuraCuadrado.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                figuraCuadradoMouseMoved(evt);
            }
        });
        figuraCuadrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                figuraCuadradoActionPerformed(evt);
            }
        });

        figuraTrazoLibre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Lapiz.gif"))); // NOI18N
        figuraTrazoLibre.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                figuraTrazoLibreMouseMoved(evt);
            }
        });
        figuraTrazoLibre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                figuraTrazoLibreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFormasLayout = new javax.swing.GroupLayout(panelFormas);
        panelFormas.setLayout(panelFormasLayout);
        panelFormasLayout.setHorizontalGroup(
            panelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormasLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(panelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFormasLayout.createSequentialGroup()
                        .addComponent(figuraPunto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(figuraCirculo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(figuraLinea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(figuraCuadrado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(figuraTrazoLibre))
                    .addComponent(jLabel2))
                .addContainerGap(624, Short.MAX_VALUE))
        );
        panelFormasLayout.setVerticalGroup(
            panelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelFormasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(figuraPunto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(figuraCirculo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(figuraLinea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(figuraCuadrado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(figuraTrazoLibre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        panelTabulado.addTab("Formas", panelFormas);

        barraHerramientas2.add(panelTabulado);

        panelBarra2.add(barraHerramientas2, java.awt.BorderLayout.PAGE_START);

        panelBarraHerramientas3.setLayout(new java.awt.BorderLayout());

        barraHerramientas3.setRollover(true);

        panel1.setLayout(new java.awt.BorderLayout());

        panel1_1.setLayout(new java.awt.BorderLayout());

        etiquetaBrillo.setText("Brillo");
        panel1_1.add(etiquetaBrillo, java.awt.BorderLayout.PAGE_START);

        opcionBrillo.setMaximum(255);
        opcionBrillo.setMinimum(-255);
        opcionBrillo.setValue(0);
        opcionBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opcionBrilloStateChanged(evt);
            }
        });
        opcionBrillo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                opcionBrilloMouseMoved(evt);
            }
        });
        opcionBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                opcionBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                opcionBrilloFocusLost(evt);
            }
        });
        panel1_1.add(opcionBrillo, java.awt.BorderLayout.CENTER);

        panel1.add(panel1_1, java.awt.BorderLayout.LINE_START);

        panel2.setLayout(new java.awt.BorderLayout());

        panel2_1.setLayout(new java.awt.BorderLayout());

        etiquetaFiltro.setText("Filtro");
        panel2_1.add(etiquetaFiltro, java.awt.BorderLayout.PAGE_START);

        opcionFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        opcionFiltro.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                opcionFiltroMouseMoved(evt);
            }
        });
        opcionFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionFiltroActionPerformed(evt);
            }
        });
        panel2_1.add(opcionFiltro, java.awt.BorderLayout.CENTER);

        panel2.add(panel2_1, java.awt.BorderLayout.LINE_START);

        panel3.setLayout(new java.awt.BorderLayout());

        panel3_1.setLayout(new java.awt.BorderLayout());

        etiquetaContaste.setText("Contraste");
        panel3_1.add(etiquetaContaste, java.awt.BorderLayout.PAGE_START);

        botonContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        botonContraste.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                botonContrasteMouseMoved(evt);
            }
        });
        botonContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteActionPerformed(evt);
            }
        });
        panel3_1.add(botonContraste, java.awt.BorderLayout.LINE_START);

        botonOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        botonOscurecer.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                botonOscurecerMouseMoved(evt);
            }
        });
        botonOscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOscurecerActionPerformed(evt);
            }
        });
        panel3_1.add(botonOscurecer, java.awt.BorderLayout.LINE_END);

        botonIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        botonIluminar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                botonIluminarMouseMoved(evt);
            }
        });
        botonIluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIluminarActionPerformed(evt);
            }
        });
        panel3_1.add(botonIluminar, java.awt.BorderLayout.CENTER);

        panel3.add(panel3_1, java.awt.BorderLayout.LINE_START);

        panel4.setLayout(new java.awt.BorderLayout());

        panel4_1.setLayout(new java.awt.BorderLayout());

        etiquetaRotacion.setText("RotaciÃ³n");
        panel4_1.add(etiquetaRotacion, java.awt.BorderLayout.PAGE_START);

        opcionRotacion.setMaximum(360);
        opcionRotacion.setValue(0);
        opcionRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opcionRotacionStateChanged(evt);
            }
        });
        opcionRotacion.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                opcionRotacionMouseMoved(evt);
            }
        });
        opcionRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                opcionRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                opcionRotacionFocusLost(evt);
            }
        });
        panel4_1.add(opcionRotacion, java.awt.BorderLayout.CENTER);

        panel4.add(panel4_1, java.awt.BorderLayout.LINE_START);

        panel5.setLayout(new java.awt.BorderLayout());

        panel5_1.setLayout(new java.awt.BorderLayout());

        rotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        rotacion90.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                rotacion90MouseMoved(evt);
            }
        });
        rotacion90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion90ActionPerformed(evt);
            }
        });
        panel5_1.add(rotacion90, java.awt.BorderLayout.LINE_START);

        rotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        rotacion270.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                rotacion270MouseMoved(evt);
            }
        });
        rotacion270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion270ActionPerformed(evt);
            }
        });
        panel5_1.add(rotacion270, java.awt.BorderLayout.LINE_END);

        rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        rotacion180.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                rotacion180MouseMoved(evt);
            }
        });
        rotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180ActionPerformed(evt);
            }
        });
        panel5_1.add(rotacion180, java.awt.BorderLayout.CENTER);

        panel5.add(panel5_1, java.awt.BorderLayout.LINE_START);

        panel6.setLayout(new java.awt.BorderLayout());

        panel6_1.setLayout(new java.awt.BorderLayout());

        etiquetaEscalado.setText("Escalado");
        panel6_1.add(etiquetaEscalado, java.awt.BorderLayout.PAGE_START);

        botonAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        botonAumentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAumentarActionPerformed(evt);
            }
        });
        panel6_1.add(botonAumentar, java.awt.BorderLayout.LINE_START);

        botonDisminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        botonDisminuir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDisminuirActionPerformed(evt);
            }
        });
        panel6_1.add(botonDisminuir, java.awt.BorderLayout.LINE_END);

        panel6.add(panel6_1, java.awt.BorderLayout.LINE_START);

        panel7.setLayout(new java.awt.BorderLayout());

        panel7_1.setLayout(new java.awt.BorderLayout());

        jLabel3.setText("Negativo");
        panel7_1.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        botonNegativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/negativo.png"))); // NOI18N
        botonNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNegativoActionPerformed(evt);
            }
        });
        panel7_1.add(botonNegativo, java.awt.BorderLayout.LINE_START);

        panel7.add(panel7_1, java.awt.BorderLayout.LINE_START);

        panel8.setLayout(new java.awt.BorderLayout());

        etiquetaEscalaGrises.setText("Escala de grises");
        panel8.add(etiquetaEscalaGrises, java.awt.BorderLayout.PAGE_START);

        botonEscalaGrises.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/gris.png"))); // NOI18N
        botonEscalaGrises.setActionCommand("");
        botonEscalaGrises.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEscalaGrisesActionPerformed(evt);
            }
        });
        panel8.add(botonEscalaGrises, java.awt.BorderLayout.LINE_START);

        panel7.add(panel8, java.awt.BorderLayout.CENTER);

        panel6.add(panel7, java.awt.BorderLayout.CENTER);

        panel5.add(panel6, java.awt.BorderLayout.CENTER);

        panel4.add(panel5, java.awt.BorderLayout.CENTER);

        panel3.add(panel4, java.awt.BorderLayout.CENTER);

        panel2.add(panel3, java.awt.BorderLayout.CENTER);

        panel1.add(panel2, java.awt.BorderLayout.CENTER);

        barraHerramientas3.add(panel1);

        panelBarraHerramientas3.add(barraHerramientas3, java.awt.BorderLayout.PAGE_END);
        panelBarraHerramientas3.add(panelEscritorio, java.awt.BorderLayout.CENTER);

        panelBarra2.add(panelBarraHerramientas3, java.awt.BorderLayout.CENTER);

        panelBarra1.add(panelBarra2, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelBarra1, java.awt.BorderLayout.CENTER);

        opcioArchivo.setText("Archivo");

        opcionNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        opcionNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        opcionNuevo.setText("Nuevo");
        opcionNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionNuevoActionPerformed(evt);
            }
        });
        opcioArchivo.add(opcionNuevo);

        opcionAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        opcionAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        opcionAbrir.setText("Abrir");
        opcionAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionAbrirActionPerformed(evt);
            }
        });
        opcioArchivo.add(opcionAbrir);

        opcionGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        opcionGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        opcionGuardar.setText("Guardar");
        opcionGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGuardarActionPerformed(evt);
            }
        });
        opcioArchivo.add(opcionGuardar);

        opcionSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        opcionSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cerrar.png"))); // NOI18N
        opcionSalir.setText("Salir");
        opcionSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSalirActionPerformed(evt);
            }
        });
        opcioArchivo.add(opcionSalir);

        jMenuBar1.add(opcioArchivo);

        opcionVer.setText("Ver");

        ocultarBarraGeneral.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK));
        ocultarBarraGeneral.setSelected(true);
        ocultarBarraGeneral.setText("Ocultar/Visualizar barra general");
        ocultarBarraGeneral.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ocultarBarraGeneralItemStateChanged(evt);
            }
        });
        opcionVer.add(ocultarBarraGeneral);

        ocultarBarraDibujo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.SHIFT_MASK));
        ocultarBarraDibujo.setSelected(true);
        ocultarBarraDibujo.setText("Ocultar/Visualizar barra dibujo");
        ocultarBarraDibujo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ocultarBarraDibujoItemStateChanged(evt);
            }
        });
        ocultarBarraDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ocultarBarraDibujoActionPerformed(evt);
            }
        });
        opcionVer.add(ocultarBarraDibujo);

        OcultarBarraOperaciones.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK));
        OcultarBarraOperaciones.setSelected(true);
        OcultarBarraOperaciones.setText("Ocultar/Visualizar barra operaciones");
        OcultarBarraOperaciones.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OcultarBarraOperacionesItemStateChanged(evt);
            }
        });
        opcionVer.add(OcultarBarraOperaciones);

        jMenuBar1.add(opcionVer);

        opcionAyuda.setText("Ayuda");

        opcionAcercaDe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        opcionAcercaDe.setText("Acerca de");
        opcionAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionAcercaDeActionPerformed(evt);
            }
        });
        opcionAyuda.add(opcionAcercaDe);

        jMenuBar1.add(opcionAyuda);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonWebcamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonWebcamActionPerformed
        // TODO add your handling code here:
        try{
                VentanaInternaCamara viJMFP = new VentanaInternaCamara();
                this.panelEscritorio.add(viJMFP);
                viJMFP.setVisible(true);
                viJMFP.setTitle("Webcam");
            }catch(Exception ex){
                System.err.println("Error en la webcam");
            }
    }//GEN-LAST:event_botonWebcamActionPerformed

    private void botonGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                VentanaInternaGrabacion vig = new VentanaInternaGrabacion(f);
                this.panelEscritorio.add(vig);
                vig.setVisible(true);
                vig.setTitle(f.getName());
            }catch(Exception ex){
                System.err.println("Error al grabar");
            }
        }
    }//GEN-LAST:event_botonGrabarActionPerformed

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                String filepathname = f.getAbsolutePath().toLowerCase();

                if (filepathname.endsWith(".jpg")){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna();
                    vi.getLienzo().setImage(img);
                    this.panelEscritorio.add(vi);
                    vi.setVisible(true);
                    vi.setSize(400, 400);
                    vi.setTitle(f.getName());
                }
                if (filepathname.endsWith(".png")){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna();
                    vi.getLienzo().setImage(img);
                    this.panelEscritorio.add(vi);
                    vi.setVisible(true);
                    vi.setSize(400, 400);
                    vi.setTitle(f.getName());
                }
                if(filepathname.endsWith(".avi")){
                    VentanaInternaJMFPlayer viJMFP = new VentanaInternaJMFPlayer(f);
                    this.panelEscritorio.add(viJMFP);
                    viJMFP.setVisible(true);
                    viJMFP.setTitle(f.getName());
                }
                if(filepathname.endsWith(".mp3")){
                    VentanaInternaJMFPlayer viJMFP = new VentanaInternaJMFPlayer(f);
                    this.panelEscritorio.add(viJMFP);
                    viJMFP.setVisible(true);
                    viJMFP.setTitle(f.getName());
                }
                if(filepathname.endsWith(".wav")){
                    VentanaInternaJMFPlayer viJMFP = new VentanaInternaJMFPlayer(f);
                    this.panelEscritorio.add(viJMFP);
                    viJMFP.setVisible(true);
                    viJMFP.setTitle(f.getName());
                }
            }catch(Exception ex){
                System.err.println("Error al el sonido, video o imagen");
            }
        }
    }//GEN-LAST:event_botonAbrirActionPerformed

    private void opcionAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAcercaDeActionPerformed
        // TODO add your handling code here:
        VentanaAcercaDe vad = new VentanaAcercaDe();
        this.panelEscritorio.add(vad);
        vad.setTitle("Acerca de ...");
        vad.setVisible(true);
    }//GEN-LAST:event_opcionAcercaDeActionPerformed

    private void botonGrabarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonGrabarMouseMoved
        // TODO add your handling code here:
        this.botonGrabar.setToolTipText("Grabar");
    }//GEN-LAST:event_botonGrabarMouseMoved

    private void botonCapturarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonCapturarMouseMoved
        // TODO add your handling code here:
        this.botonCapturar.setToolTipText("Capturar imagen");
    }//GEN-LAST:event_botonCapturarMouseMoved

    private void botonWebcamMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonWebcamMouseMoved
        // TODO add your handling code here:
        this.botonWebcam.setToolTipText("Webcam");
    }//GEN-LAST:event_botonWebcamMouseMoved

    private void botonGuardarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonGuardarMouseMoved
        // TODO add your handling code here:
        this.botonGuardar.setToolTipText("Guardar imagen");
    }//GEN-LAST:event_botonGuardarMouseMoved

    private void botonAbrirMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonAbrirMouseMoved
        // TODO add your handling code here:
        this.botonAbrir.setToolTipText("Abrir archivo");
    }//GEN-LAST:event_botonAbrirMouseMoved

    private void botonNuevoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonNuevoMouseMoved
        // TODO add your handling code here:
        this.botonNuevo.setToolTipText("Nueva imagen");
    }//GEN-LAST:event_botonNuevoMouseMoved

    private void opcionBrilloMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opcionBrilloMouseMoved
        // TODO add your handling code here:
        opcionBrillo.setToolTipText("Brillo");
    }//GEN-LAST:event_opcionBrilloMouseMoved

    private void opcionFiltroMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opcionFiltroMouseMoved
        // TODO add your handling code here:
        opcionFiltro.setToolTipText("Tipo de operaciones sobre la imagen");
    }//GEN-LAST:event_opcionFiltroMouseMoved

    private void botonContrasteMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonContrasteMouseMoved
        // TODO add your handling code here:
        botonContraste.setToolTipText("Contraste");
    }//GEN-LAST:event_botonContrasteMouseMoved

    private void botonIluminarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonIluminarMouseMoved
        // TODO add your handling code here:
        botonIluminar.setToolTipText("Iluminar");
    }//GEN-LAST:event_botonIluminarMouseMoved

    private void botonOscurecerMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonOscurecerMouseMoved
        // TODO add your handling code here:
        botonOscurecer.setToolTipText("Oscurecer");
    }//GEN-LAST:event_botonOscurecerMouseMoved

    private void opcionRotacionMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opcionRotacionMouseMoved
        // TODO add your handling code here:
        opcionRotacion.setToolTipText("RotaciÃ³n");
    }//GEN-LAST:event_opcionRotacionMouseMoved

    private void rotacion90MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rotacion90MouseMoved
        // TODO add your handling code here:
        rotacion90.setToolTipText("Girar 90Âº");
    }//GEN-LAST:event_rotacion90MouseMoved

    private void rotacion180MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rotacion180MouseMoved
        // TODO add your handling code here:
        rotacion180.setToolTipText("Girar 180Âº");
    }//GEN-LAST:event_rotacion180MouseMoved

    private void rotacion270MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rotacion270MouseMoved
        // TODO add your handling code here:
        rotacion270.setToolTipText("Girar 270Âº");
    }//GEN-LAST:event_rotacion270MouseMoved

    private void figuraPuntoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_figuraPuntoMouseMoved
        // TODO add your handling code here:
        figuraPunto.setToolTipText("Punto");
    }//GEN-LAST:event_figuraPuntoMouseMoved

    private void figuraCirculoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_figuraCirculoMouseMoved
        // TODO add your handling code here:
        figuraCirculo.setToolTipText("CÃ­rculo");
    }//GEN-LAST:event_figuraCirculoMouseMoved

    private void figuraLineaMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_figuraLineaMouseMoved
        // TODO add your handling code here:
        figuraLinea.setToolTipText("LÃ­nea");
    }//GEN-LAST:event_figuraLineaMouseMoved

    private void figuraCuadradoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_figuraCuadradoMouseMoved
        // TODO add your handling code here:
        figuraCuadrado.setToolTipText("Cuadrado");
    }//GEN-LAST:event_figuraCuadradoMouseMoved

    private void figuraTrazoLibreMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_figuraTrazoLibreMouseMoved
        // TODO add your handling code here:
        figuraTrazoLibre.setToolTipText("Trazo Libre");
    }//GEN-LAST:event_figuraTrazoLibreMouseMoved

    private void opcionBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_opcionBrilloFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
        if (vi != null) {
                imgSource = vi.getLienzo().getImage();
        }
    }//GEN-LAST:event_opcionBrilloFocusGained

    private void opcionBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_opcionBrilloFocusLost
        // TODO add your handling code here:
        imgSource = null;
        opcionBrillo.setValue(0);
    }//GEN-LAST:event_opcionBrilloFocusLost

    private void opcionBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_opcionBrilloStateChanged
        // TODO add your handling code here:
         VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
            
            if (vi != null && imgSource!=null) {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                if(imgSource!=null){
                    try{
                        RescaleOp rop = new RescaleOp(1.0F, this.opcionBrillo.getValue(), null);
                        BufferedImage imgdest = rop.filter(imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                    this.setCursor(null);
                }
            }
    }//GEN-LAST:event_opcionBrilloStateChanged

    private void botonContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
            
            if (vi != null) {
                imgSource = vi.getLienzo().getImage();
                if(imgSource.getType()!=BufferedImage.TYPE_INT_RGB)
                    imgSource = convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                if(imgSource!=null){
                    try{
                        LookupTable lt;
                        lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                        LookupOp lop = new LookupOp(lt, null);
                        BufferedImage imgdest = lop.filter(imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                }
            }
    }//GEN-LAST:event_botonContrasteActionPerformed

    private void botonIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIluminarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
            
            if (vi != null) {
                imgSource = vi.getLienzo().getImage();
                if(imgSource.getType()!=BufferedImage.TYPE_INT_RGB)
                    imgSource = convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                if(imgSource!=null){
                    try{
                        LookupTable lt;
                        lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_GAMMA_CORRECTION);
                        LookupOp lop = new LookupOp(lt, null);
                        BufferedImage imgdest = lop.filter(imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                }
            }
    }//GEN-LAST:event_botonIluminarActionPerformed

    private void botonOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOscurecerActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
            
            if (vi != null) {
                imgSource = vi.getLienzo().getImage();
                if(imgSource.getType()!=BufferedImage.TYPE_INT_RGB)
                    imgSource = convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                if(imgSource!=null){
                    try{
                        LookupTable lt;
                        lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                        LookupOp lop = new LookupOp(lt, null);
                        BufferedImage imgdest = lop.filter(imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                }
            }
    }//GEN-LAST:event_botonOscurecerActionPerformed

    private void opcionRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_opcionRotacionFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
        if (vi != null) {
                imgSource = vi.getLienzo().getImage();
        }
    }//GEN-LAST:event_opcionRotacionFocusGained

    private void opcionRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_opcionRotacionFocusLost
        // TODO add your handling code here:
        imgSource = null;
        opcionRotacion.setValue(0);
    }//GEN-LAST:event_opcionRotacionFocusLost

    private void opcionRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_opcionRotacionStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());        
            
         if (vi != null) {
             this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
             if(imgSource!=null){
                 try{
                        double r = Math.toRadians(this.opcionRotacion.getValue());
                        Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
                        AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                        AffineTransformOp atop;
                        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter(imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                    this.setCursor(null);
                }
            }
    }//GEN-LAST:event_opcionRotacionStateChanged

    private void rotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());        
            
         if (vi != null) {
             imgSource = vi.getLienzo().getImage();
             if(imgSource!=null){
                 try{
                        double r = Math.toRadians(90);
                        Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
                        AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                        AffineTransformOp atop;
                        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter(imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                    this.setCursor(null);
                }
            }
    }//GEN-LAST:event_rotacion90ActionPerformed

    private void rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());        
            
         if (vi != null) {
             imgSource = vi.getLienzo().getImage();
             if(imgSource!=null){
                 try{
                        double r = Math.toRadians(180);
                        Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
                        AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                        AffineTransformOp atop;
                        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter(imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                    this.setCursor(null);
                }
            }
    }//GEN-LAST:event_rotacion180ActionPerformed

    private void rotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion270ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());        
            
         if (vi != null) {
             imgSource = vi.getLienzo().getImage();
             if(imgSource!=null){
                 try{
                        double r = Math.toRadians(270);
                        Point p = new Point(imgSource.getWidth()/2, imgSource.getHeight()/2);
                        AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                        AffineTransformOp atop;
                        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter(imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                    this.setCursor(null);
                }
            }
    }//GEN-LAST:event_rotacion270ActionPerformed

    private void opcionFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionFiltroActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
        
        if (vi != null) {
            imgSource = vi.getLienzo().getImage();
            if(imgSource!=null && imgSource!=null){
                try{
                    Kernel k = KernelProducer.createKernel(this.opcionFiltro.getSelectedIndex());
                    ConvolveOp rop = new ConvolveOp(k);
                    BufferedImage imgdest = rop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_opcionFiltroActionPerformed

    private void ocultarBarraGeneralItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ocultarBarraGeneralItemStateChanged
        // TODO add your handling code here:
        if(ocultarBarraGeneral.isSelected()){
            barraHerramientas1.setVisible(true);
        }else{
            barraHerramientas1.setVisible(false);
        }
    }//GEN-LAST:event_ocultarBarraGeneralItemStateChanged

    private void ocultarBarraDibujoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ocultarBarraDibujoItemStateChanged
        // TODO add your handling code here:
        if(ocultarBarraDibujo.isSelected()){
            barraHerramientas2.setVisible(true);
        }else{
            barraHerramientas2.setVisible(false);
        }
    }//GEN-LAST:event_ocultarBarraDibujoItemStateChanged

    private void OcultarBarraOperacionesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OcultarBarraOperacionesItemStateChanged
        // TODO add your handling code here:
        if(OcultarBarraOperaciones.isSelected()){
             barraHerramientas3.setVisible(true);
        }else{
            barraHerramientas3.setVisible(false);
        }
    }//GEN-LAST:event_OcultarBarraOperacionesItemStateChanged

    private void opcionSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_opcionSalirActionPerformed

    private void botonNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegativoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
            
            if (vi != null) {
                imgSource = vi.getLienzo().getImage();
                if(imgSource.getType()!=BufferedImage.TYPE_INT_RGB)
                    imgSource = convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                if(imgSource!=null){
                    try{
                        LookupTable lt;
                        lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
                        LookupOp lop = new LookupOp(lt, null);
                        BufferedImage imgdest = lop.filter(imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                }
            }
    }//GEN-LAST:event_botonNegativoActionPerformed

    private void botonEscalaGrisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEscalaGrisesActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
        ICC_Profile ip;
            
            if (vi != null) {
                imgSource = vi.getLienzo().getImage();
                if(imgSource!=null){
                    try{
                        ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY);
                        ColorSpace cs = new ICC_ColorSpace(ip);
                        ColorConvertOp ccop = new ColorConvertOp(cs,null);
                        BufferedImage imgdest = ccop.filter(imgSource,null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                }
            }
    }//GEN-LAST:event_botonEscalaGrisesActionPerformed

    private void figuraPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_figuraPuntoActionPerformed
        // TODO add your handling code here:
        valor_figura=1;
        BarraEstado.setText("Punto");
    }//GEN-LAST:event_figuraPuntoActionPerformed

    private void figuraCirculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_figuraCirculoActionPerformed
        // TODO add your handling code here:
        valor_figura=2;
        BarraEstado.setText("Linea");
    }//GEN-LAST:event_figuraCirculoActionPerformed

    private void figuraLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_figuraLineaActionPerformed
        // TODO add your handling code here:
        valor_figura=3;
        BarraEstado.setText("Cuadrado");
    }//GEN-LAST:event_figuraLineaActionPerformed

    private void figuraCuadradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_figuraCuadradoActionPerformed
        // TODO add your handling code here:
        valor_figura=4;
        BarraEstado.setText("Ovalo");
    }//GEN-LAST:event_figuraCuadradoActionPerformed

    private void figuraTrazoLibreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_figuraTrazoLibreActionPerformed
        // TODO add your handling code here:
        valor_figura=5;
        BarraEstado.setText("Trazo Libre");
    }//GEN-LAST:event_figuraTrazoLibreActionPerformed

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        // TODO add your handling code here:
        try{
            int ancho = Integer.parseInt( JOptionPane.showInputDialog(
            null,"Introduzca el ancho de la imagen",
            "TamaÃ±o de anchura",
            JOptionPane.QUESTION_MESSAGE) );


          int alto = Integer.parseInt( JOptionPane.showInputDialog(
            null,"Introduzca el alto de la imagen",
            "TamaÃ±o de altura",
            JOptionPane.QUESTION_MESSAGE) );
           
           BufferedImage img1 = new BufferedImage(alto, ancho, BufferedImage.TYPE_INT_RGB);   
           RescaleOp rop = new RescaleOp(1.0f,1000.0f, null);
            BufferedImage imgOut = rop.filter(img1,null);
            VentanaInterna vi = new VentanaInterna();
            this.panelEscritorio.add(vi);
            vi.getLienzo().setImage(imgOut);
            vi.setVisible(true);
            vi.setSize(500, 500);
      }catch(HeadlessException | NumberFormatException e){
            System.err.println("Error al crear la imagen");
      }
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void botonCapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapturarActionPerformed
        // TODO add your handling code here:
        aplicarBrilloImagen=false;
        JInternalFrame v = this.panelEscritorio.getSelectedFrame();
          
        if("Webcam".equals(v.getTitle())){ 
            VentanaInternaCamara viw = (VentanaInternaCamara) (panelEscritorio.getSelectedFrame());
            if (viw != null) {
                BufferedImage img = viw.getFrame();
                if(img!=null){
                    try{
                        VentanaInterna vic = new VentanaInterna();
                        vic.getLienzo().setImage(img);
                        this.panelEscritorio.add(vic);
                        vic.setVisible(true);
                        vic.setSize(400, 400);
                        vic.setTitle("Captura Webcam");
                    } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
             }
        }else{
            VentanaInternaJMFPlayer viJMF = (VentanaInternaJMFPlayer) (panelEscritorio.getSelectedFrame());
            if (viJMF != null) {
                BufferedImage img = viJMF.getFrame();
                if(img!=null){
                    try{
                        VentanaInterna vic = new VentanaInterna();
                        vic.getLienzo().setImage(img);
                        this.panelEscritorio.add(vic);
                        vic.setVisible(true);
                        vic.setSize(400, 400);
                        vic.setTitle("Captura Webcam");
                    } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
             }
        }
    }//GEN-LAST:event_botonCapturarActionPerformed

    private void opcionNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionNuevoActionPerformed
        // TODO add your handling code here:
        int ancho = Integer.parseInt( JOptionPane.showInputDialog(
        null,"Introduzca el ancho de la imagen",
        "TamaÃ±o de anchura",
        JOptionPane.QUESTION_MESSAGE) );
 
      int alto = Integer.parseInt( JOptionPane.showInputDialog(
        null,"Introduzca el alto de la imagen",
        "TamaÃ±o de altura",
        JOptionPane.QUESTION_MESSAGE) );
      
      BufferedImage img1 = new BufferedImage(alto, ancho, BufferedImage.TYPE_INT_RGB);      
              
      VentanaInterna vi = new VentanaInterna();
      this.panelEscritorio.add(vi);
      vi.getLienzo().setImage(img1);

      vi.setVisible(true);
      vi.setSize(500, 500);
            
    }//GEN-LAST:event_opcionNuevoActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed

        // TODO add your handling code here:
        JInternalFrame v = this.panelEscritorio.getSelectedFrame();
        
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                VentanaInterna vi = (VentanaInterna) v;
                BufferedImage img = vi.getLienzo().getImage();
                File fichero = dlg.getSelectedFile();
                ImageIO.write(img, "jpg", fichero); 
            }catch(Exception ex){
                System.err.println("Error al leer la imagen"); 
            }
                
        }
    }//GEN-LAST:event_botonGuardarActionPerformed

    
    private void botonAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAumentarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
         AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
            
            if (vi != null) {
                imgSource = vi.getLienzo().getImage();
                if(imgSource!=null){
                    try{
                        AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                }
            }
    }//GEN-LAST:event_botonAumentarActionPerformed

    private void botonDisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDisminuirActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (panelEscritorio.getSelectedFrame());
         AffineTransform at = AffineTransform.getScaleInstance(0.75,0.75);
            
            if (vi != null) {
                imgSource = vi.getLienzo().getImage();
                if(imgSource!=null){
                    try{
                        AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( imgSource, null);
                        vi.getLienzo().setImage(imgdest);
                         vi.getLienzo().repaint();
                     } catch(IllegalArgumentException e){
                         System.err.println(e.getLocalizedMessage());
                     }
                }
            }
    }//GEN-LAST:event_botonDisminuirActionPerformed

    private void opcionAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAbrirActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                String filepathname = f.getAbsolutePath().toLowerCase();

                if (filepathname.endsWith(".jpg")){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna();
                    vi.getLienzo().setImage(img);
                    this.panelEscritorio.add(vi);
                    vi.setVisible(true);
                    vi.setSize(400, 400);
                    vi.setTitle(f.getName());
                }
                if (filepathname.endsWith(".png")){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna();
                    vi.getLienzo().setImage(img);
                    this.panelEscritorio.add(vi);
                    vi.setVisible(true);
                    vi.setSize(400, 400);
                    vi.setTitle(f.getName());
                }
                if(filepathname.endsWith(".avi")){
                    VentanaInternaJMFPlayer viJMFP = new VentanaInternaJMFPlayer(f);
                    this.panelEscritorio.add(viJMFP);
                    viJMFP.setVisible(true);
                    viJMFP.setTitle(f.getName());
                }
                if(filepathname.endsWith(".mp3")){
                    VentanaInternaJMFPlayer viJMFP = new VentanaInternaJMFPlayer(f);
                    this.panelEscritorio.add(viJMFP);
                    viJMFP.setVisible(true);
                    viJMFP.setTitle(f.getName());
                }
                if(filepathname.endsWith(".wav")){
                    VentanaInternaJMFPlayer viJMFP = new VentanaInternaJMFPlayer(f);
                    this.panelEscritorio.add(viJMFP);
                    viJMFP.setVisible(true);
                    viJMFP.setTitle(f.getName());
                }
            }catch(Exception ex){
                System.err.println("Error al el sonido o video");
            }
        }
    }//GEN-LAST:event_opcionAbrirActionPerformed

    private void opcionGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardarActionPerformed
        // TODO add your handling code here:
        JInternalFrame v = this.panelEscritorio.getSelectedFrame();
        
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                VentanaInterna vi = (VentanaInterna) v;
                BufferedImage img = vi.getLienzo().getImage();
                File fichero = dlg.getSelectedFile();
                ImageIO.write(img, "jpg", fichero); 
            }catch(Exception ex){
                System.err.println("Error al leer la imagen"); 
            }
                
        }
    }//GEN-LAST:event_opcionGuardarActionPerformed

    private void opcionEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionEditarActionPerformed
        // TODO add your handling code here:
        if(opcionEditar.isSelected()){
            editar=true;
        }else{
            editar=false;
        }
    }//GEN-LAST:event_opcionEditarActionPerformed

    private void botonMasColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMasColoresActionPerformed
        // TODO add your handling code here:
        final Colores colores;
        if(botonColor1.isSelected()){
            colores = new Colores(valor_color1);
            colores.setVisible(true);
        }else{
            colores = new Colores(valor_color2);
            colores.setVisible(true);
        }
        
        colores.aÃ±adirColor(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    if(botonColor1.isSelected()){
                        valor_color1 = colores.getColor();
                        botonColor1.setBackground(valor_color1);
                    }else{
                        valor_color2 = colores.getColor();
                        botonColor2.setBackground(valor_color2);
                    }
                
                } 
        });
    }//GEN-LAST:event_botonMasColoresActionPerformed

    private void botonMasColoresMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonMasColoresMouseMoved
        // TODO add your handling code here:
        botonMasColores.setToolTipText("MÃ¡s colores");
    }//GEN-LAST:event_botonMasColoresMouseMoved

    private void opcionGrosorMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opcionGrosorMouseMoved
        // TODO add your handling code here:
        
    }//GEN-LAST:event_opcionGrosorMouseMoved

    private void colorVerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorVerdeActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(activar){
            valor_color1=Color.GREEN;
            botonColor1.setBackground(valor_color1);
        }else{
            valor_color2=Color.GREEN;
            botonColor2.setBackground(valor_color2);
        }
        //repaint();
    }//GEN-LAST:event_colorVerdeActionPerformed

    private void colorVerdeMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorVerdeMouseMoved
        // TODO add your handling code here:
        colorVerde.setToolTipText("Verde");
    }//GEN-LAST:event_colorVerdeMouseMoved

    private void colorAmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorAmarilloActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(activar){
            valor_color1=Color.YELLOW;
            botonColor1.setBackground(valor_color1);
        }else{
            valor_color2=Color.YELLOW;
            botonColor2.setBackground(valor_color2);
        }
        //repaint();
    }//GEN-LAST:event_colorAmarilloActionPerformed

    private void colorAmarilloMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorAmarilloMouseMoved
        // TODO add your handling code here:
        colorAmarillo.setToolTipText("Amarillo");
    }//GEN-LAST:event_colorAmarilloMouseMoved

    private void colorBlancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBlancoActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(activar){
            valor_color1=Color.WHITE;
            botonColor1.setBackground(valor_color1);
        }else{
            valor_color2=Color.WHITE;
            botonColor1.setBackground(valor_color1);
        }
        //repaint();
    }//GEN-LAST:event_colorBlancoActionPerformed

    private void colorBlancoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorBlancoMouseMoved
        // TODO add your handling code here:
        colorBlanco.setToolTipText("Blanco");
    }//GEN-LAST:event_colorBlancoMouseMoved

    private void colorAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorAzulActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(activar){
            valor_color1=Color.BLUE;
            botonColor1.setBackground(valor_color1);
        }else{
            valor_color2=Color.BLUE;
            botonColor2.setBackground(valor_color2);
        }
        //repaint();
    }//GEN-LAST:event_colorAzulActionPerformed

    private void colorAzulMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorAzulMouseMoved
        // TODO add your handling code here:
        colorAzul.setToolTipText("Azul");
    }//GEN-LAST:event_colorAzulMouseMoved

    private void colorRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRojoActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(activar){
            valor_color1=Color.RED;
            botonColor1.setBackground(valor_color1);
        }else{
            valor_color2=Color.RED;
            botonColor2.setBackground(valor_color2);
        }
        //repaint();
    }//GEN-LAST:event_colorRojoActionPerformed

    private void colorRojoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorRojoMouseMoved
        // TODO add your handling code here:
        colorRojo.setToolTipText("Rojo");
    }//GEN-LAST:event_colorRojoMouseMoved

    private void colorNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorNegroActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(activar){
            valor_color1=Color.BLACK;
            botonColor1.setBackground(valor_color1);
        }else{
            valor_color2=Color.BLACK;
            botonColor2.setBackground(valor_color2);
        }
        //repaint();
    }//GEN-LAST:event_colorNegroActionPerformed

    private void colorNegroMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorNegroMouseMoved
        // TODO add your handling code here:
        this.colorNegro.setToolTipText("Negro");
    }//GEN-LAST:event_colorNegroMouseMoved

    private void opcionSinRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSinRellenoActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(opcionSinRelleno.isSelected()){
            valor_relleno=true;
            liso=false;
            degradadoVertical=false;
            degradadoHorizontal=false;
        }else{
            valor_relleno=false;
        }
    }//GEN-LAST:event_opcionSinRellenoActionPerformed

    private void ocultarBarraDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ocultarBarraDibujoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ocultarBarraDibujoActionPerformed

    private void opcionGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_opcionGrosorStateChanged
        // TODO add your handling code here:
        modificar=true;
        opcionGrosor.setToolTipText("Grosor");
        gro = opcionGrosor.getValue().hashCode();
            if(gro<=0){
                opcionGrosor.setValue(1);
            }
    }//GEN-LAST:event_opcionGrosorStateChanged

    private void botonColor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonColor2ActionPerformed
        // TODO add your handling code here:
        if(botonColor2.isSelected()){
            activar=false;
        }else{
            activar=true;
        }
    }//GEN-LAST:event_botonColor2ActionPerformed

    private void botonColor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonColor1ActionPerformed
        // TODO add your handling code here:
        if(botonColor1.isSelected()){
            activar=true;
        }else{
            activar=false;
        }
    }//GEN-LAST:event_botonColor1ActionPerformed

    private void opcionRellenoLisoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionRellenoLisoActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(opcionRellenoLiso.isSelected()){
            liso=true;
            valor_relleno=false;
            degradadoVertical=false;
            degradadoHorizontal=false;
        }else{
            liso=false;
        }
    }//GEN-LAST:event_opcionRellenoLisoActionPerformed

    private void opcionDegradadoVerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionDegradadoVerticalActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(opcionDegradadoVertical.isSelected()){
            degradadoVertical=true;
            degradadoHorizontal=false;
            liso=false;
            valor_relleno=false;
        }else{
            degradadoVertical=false;
        }
    }//GEN-LAST:event_opcionDegradadoVerticalActionPerformed

    private void opcionContinuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionContinuaActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(opcionContinua.isSelected()){
            punteada=false;
            continua=true;
        }
    }//GEN-LAST:event_opcionContinuaActionPerformed

    private void opcionPunteadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionPunteadaActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(opcionPunteada.isSelected()){
            punteada=true;
            continua=false;
        }
    }//GEN-LAST:event_opcionPunteadaActionPerformed

    private void opcionDegradadoHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionDegradadoHorizontalActionPerformed
        // TODO add your handling code here:
        modificar=true;
        if(opcionDegradadoHorizontal.isSelected()){
            degradadoVertical=false;
            degradadoHorizontal=true;
            liso=false;
            valor_relleno=false;
        }else{
            degradadoHorizontal=false;
        }
    }//GEN-LAST:event_opcionDegradadoHorizontalActionPerformed

    /**
     * MÃ©todo para convertir una imagen a un tipo.
     * @param img Imagen a convertir.
     * @param type Tipo al que convertir la imagen.
     * @return La imagen convertida al tipo.
     */
    public BufferedImage convertImageType(BufferedImage img, int type){
        if(img==null) return null;
            BufferedImage imgOut = new BufferedImage(img.getWidth(),
            img.getHeight(), type);
            Graphics2D g2d = imgOut.createGraphics();
            g2d.drawImage(img,0,0,null);
            return imgOut;
   }
    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BarraEstado;
    private javax.swing.JCheckBoxMenuItem OcultarBarraOperaciones;
    private javax.swing.JToolBar barraHerramientas1;
    private javax.swing.JToolBar barraHerramientas2;
    private javax.swing.JToolBar barraHerramientas3;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonAumentar;
    private javax.swing.JButton botonCapturar;
    private javax.swing.JToggleButton botonColor1;
    private javax.swing.JToggleButton botonColor2;
    private javax.swing.JButton botonContraste;
    private javax.swing.JButton botonDisminuir;
    private javax.swing.JButton botonEscalaGrises;
    private javax.swing.JButton botonGrabar;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonIluminar;
    private javax.swing.JButton botonMasColores;
    private javax.swing.JButton botonNegativo;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JButton botonOscurecer;
    private javax.swing.JButton botonWebcam;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton colorAmarillo;
    private javax.swing.JButton colorAzul;
    private javax.swing.JButton colorBlanco;
    private javax.swing.JButton colorNegro;
    private javax.swing.JButton colorRojo;
    private javax.swing.JButton colorVerde;
    private javax.swing.JLabel etiquetaBrillo;
    private javax.swing.JLabel etiquetaColorRelleno;
    private javax.swing.JLabel etiquetaColorTrazo;
    private javax.swing.JLabel etiquetaColores;
    private javax.swing.JLabel etiquetaContaste;
    private javax.swing.JLabel etiquetaDiscontinuidad;
    private javax.swing.JLabel etiquetaEscalaGrises;
    private javax.swing.JLabel etiquetaEscalado;
    private javax.swing.JLabel etiquetaFiltro;
    private javax.swing.JLabel etiquetaGrosor;
    private javax.swing.JLabel etiquetaRelleno;
    private javax.swing.JLabel etiquetaRotacion;
    private javax.swing.JButton figuraCirculo;
    private javax.swing.JButton figuraCuadrado;
    private javax.swing.JButton figuraLinea;
    private javax.swing.JButton figuraPunto;
    private javax.swing.JButton figuraTrazoLibre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JCheckBoxMenuItem ocultarBarraDibujo;
    private javax.swing.JCheckBoxMenuItem ocultarBarraGeneral;
    private javax.swing.JMenu opcioArchivo;
    private javax.swing.JMenuItem opcionAbrir;
    private javax.swing.JMenuItem opcionAcercaDe;
    private javax.swing.JMenu opcionAyuda;
    private javax.swing.JSlider opcionBrillo;
    private javax.swing.JRadioButton opcionContinua;
    private javax.swing.JRadioButton opcionDegradadoHorizontal;
    private javax.swing.JRadioButton opcionDegradadoVertical;
    private javax.swing.JCheckBox opcionEditar;
    private javax.swing.JComboBox opcionFiltro;
    private javax.swing.JSpinner opcionGrosor;
    private javax.swing.JMenuItem opcionGuardar;
    private javax.swing.JMenuItem opcionNuevo;
    private javax.swing.JRadioButton opcionPunteada;
    private javax.swing.JRadioButton opcionRellenoLiso;
    private javax.swing.JSlider opcionRotacion;
    private javax.swing.JMenuItem opcionSalir;
    private javax.swing.JRadioButton opcionSinRelleno;
    private javax.swing.JMenu opcionVer;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel1_1;
    private javax.swing.JPanel panel2;
    private javax.swing.JPanel panel2_1;
    private javax.swing.JPanel panel3;
    private javax.swing.JPanel panel3_1;
    private javax.swing.JPanel panel4;
    private javax.swing.JPanel panel4_1;
    private javax.swing.JPanel panel5;
    private javax.swing.JPanel panel5_1;
    private javax.swing.JPanel panel6;
    private javax.swing.JPanel panel6_1;
    private javax.swing.JPanel panel7;
    private javax.swing.JPanel panel7_1;
    private javax.swing.JPanel panel8;
    private javax.swing.JPanel panelAtributos;
    private javax.swing.JPanel panelBarra1;
    private javax.swing.JPanel panelBarra2;
    private javax.swing.JPanel panelBarraHerramientas3;
    private javax.swing.JDesktopPane panelEscritorio;
    private javax.swing.JPanel panelFormas;
    private javax.swing.JTabbedPane panelTabulado;
    private javax.swing.JButton rotacion180;
    private javax.swing.JButton rotacion270;
    private javax.swing.JButton rotacion90;
    // End of variables declaration//GEN-END:variables
}
